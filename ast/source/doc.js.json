{
  "type": "Program",
  "body": [
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "Results",
          "range": [
            5802,
            5809
          ],
          "loc": {
            "start": {
              "line": 144,
              "column": 13
            },
            "end": {
              "line": 144,
              "column": 20
            }
          }
        },
        "superClass": {
          "type": "Identifier",
          "name": "Array",
          "range": [
            5818,
            5823
          ],
          "loc": {
            "start": {
              "line": 144,
              "column": 29
            },
            "end": {
              "line": 144,
              "column": 34
            }
          }
        },
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "group",
                "range": [
                  6787,
                  6792
                ],
                "loc": {
                  "start": {
                    "line": 170,
                    "column": 4
                  },
                  "end": {
                    "line": 170,
                    "column": 9
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "matcher",
                    "range": [
                      6793,
                      6800
                    ],
                    "loc": {
                      "start": {
                        "line": 170,
                        "column": 10
                      },
                      "end": {
                        "line": 170,
                        "column": 17
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null",
                        "range": [
                          6811,
                          6815
                        ],
                        "loc": {
                          "start": {
                            "line": 170,
                            "column": 28
                          },
                          "end": {
                            "line": 170,
                            "column": 32
                          }
                        }
                      },
                      "range": [
                        6804,
                        6816
                      ],
                      "loc": {
                        "start": {
                          "line": 170,
                          "column": 21
                        },
                        "end": {
                          "line": 170,
                          "column": 33
                        }
                      }
                    }
                  ],
                  "range": [
                    6802,
                    6818
                  ],
                  "loc": {
                    "start": {
                      "line": 170,
                      "column": 19
                    },
                    "end": {
                      "line": 170,
                      "column": 35
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  6792,
                  6818
                ],
                "loc": {
                  "start": {
                    "line": 170,
                    "column": 9
                  },
                  "end": {
                    "line": 170,
                    "column": 35
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                6787,
                6818
              ],
              "loc": {
                "start": {
                  "line": 170,
                  "column": 4
                },
                "end": {
                  "line": 170,
                  "column": 35
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Group looks for and returns the first group in the results\n     * that matches the provided tags.\n     *\n     * If you've used lodash or underscore, we do something quite similar to\n     * their object matching: for every row in the results, if it contains tag\n     * values matching the requested object, we return it.\n     *\n     * @param  {Object.<String, String>} matcher\n     * @return {T[]}\n     * @example\n     * // Matching tags sets in queries:\n     * influx.query('select * from perf group by host').then(results => {\n     *   expect(results.group({ host: 'ares.peet.io'})).to.deep.equal([\n     *     { host: 'ares.peet.io', cpu: 0.12, mem: 2435 },\n     *     { host: 'ares.peet.io', cpu: 0.10, mem: 2451 },\n     *     // ...\n     *   ])\n     *\n     *   expect(results.group({ host: 'box1.example.com'})).to.deep.equal([\n     *     { host: 'box1.example.com', cpu: 0.54, mem: 8420 },\n     *     // ...\n     *   ])\n     * })\n     ",
                  "range": [
                    5830,
                    6782
                  ],
                  "loc": {
                    "start": {
                      "line": 145,
                      "column": 4
                    },
                    "end": {
                      "line": 169,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns the data grouped into nested arrays, similarly to how it was\n     * returned from Influx originally.\n     *\n     * @returns {Array<{ name: String, tags: Object.<String, String>, rows: T[] }>}\n     * @example\n     * influx.query('select * from perf group by host').then(results => {\n     *   expect(results.groups()).to.deep.equal([\n     *     {\n     *       name: 'perf',\n     *       tags: { host: 'ares.peet.io' },\n     *       rows: [\n     *         { host: 'ares.peet.io', cpu: 0.12, mem: 2435 },\n     *         { host: 'ares.peet.io', cpu: 0.10, mem: 2451 },\n     *         // ...\n     *       ]\n     *     }\n     *     {\n     *       name: 'perf',\n     *       tags: { host: 'box1.example.com' },\n     *       rows: [\n     *         { host: 'box1.example.com', cpu: 0.54, mem: 8420 },\n     *         // ...\n     *       ]\n     *     }\n     *   ])\n     * })\n     ",
                  "range": [
                    6823,
                    7712
                  ],
                  "loc": {
                    "start": {
                      "line": 171,
                      "column": 4
                    },
                    "end": {
                      "line": 198,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "groups",
                "range": [
                  7717,
                  7723
                ],
                "loc": {
                  "start": {
                    "line": 199,
                    "column": 4
                  },
                  "end": {
                    "line": 199,
                    "column": 10
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null",
                        "range": [
                          7735,
                          7739
                        ],
                        "loc": {
                          "start": {
                            "line": 199,
                            "column": 22
                          },
                          "end": {
                            "line": 199,
                            "column": 26
                          }
                        }
                      },
                      "range": [
                        7728,
                        7740
                      ],
                      "loc": {
                        "start": {
                          "line": 199,
                          "column": 15
                        },
                        "end": {
                          "line": 199,
                          "column": 27
                        }
                      }
                    }
                  ],
                  "range": [
                    7726,
                    7742
                  ],
                  "loc": {
                    "start": {
                      "line": 199,
                      "column": 13
                    },
                    "end": {
                      "line": 199,
                      "column": 29
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  7723,
                  7742
                ],
                "loc": {
                  "start": {
                    "line": 199,
                    "column": 10
                  },
                  "end": {
                    "line": 199,
                    "column": 29
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                7717,
                7742
              ],
              "loc": {
                "start": {
                  "line": 199,
                  "column": 4
                },
                "end": {
                  "line": 199,
                  "column": 29
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns the data grouped into nested arrays, similarly to how it was\n     * returned from Influx originally.\n     *\n     * @returns {Array<{ name: String, tags: Object.<String, String>, rows: T[] }>}\n     * @example\n     * influx.query('select * from perf group by host').then(results => {\n     *   expect(results.groups()).to.deep.equal([\n     *     {\n     *       name: 'perf',\n     *       tags: { host: 'ares.peet.io' },\n     *       rows: [\n     *         { host: 'ares.peet.io', cpu: 0.12, mem: 2435 },\n     *         { host: 'ares.peet.io', cpu: 0.10, mem: 2451 },\n     *         // ...\n     *       ]\n     *     }\n     *     {\n     *       name: 'perf',\n     *       tags: { host: 'box1.example.com' },\n     *       rows: [\n     *         { host: 'box1.example.com', cpu: 0.54, mem: 8420 },\n     *         // ...\n     *       ]\n     *     }\n     *   ])\n     * })\n     ",
                  "range": [
                    6823,
                    7712
                  ],
                  "loc": {
                    "start": {
                      "line": 171,
                      "column": 4
                    },
                    "end": {
                      "line": 198,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            5824,
            7744
          ],
          "loc": {
            "start": {
              "line": 144,
              "column": 35
            },
            "end": {
              "line": 200,
              "column": 1
            }
          }
        },
        "range": [
          5796,
          7744
        ],
        "loc": {
          "start": {
            "line": 144,
            "column": 7
          },
          "end": {
            "line": 200,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Pool options can be passed into the database to configure the behaviour\n * of the connection pool.\n * @typedef {Object} PoolOptions\n * @property {Number} [maxRetries=2] Number of times we should retry running\n *     a query before calling back with an error.\n * @property {Number} [requestTimeout=30000] The length of time after which\n *     HTTP requests will error if they do not receive a response.\n * @property {BackoffStrategy} [backoff] The backoff strategy to use for\n *     unhealthy connections. Defaults to an exponential backoff with an\n *     initial delay of 300ms and a maximum delay of 10 seconds.\n ",
            "range": [
              0,
              623
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 12,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * A SingleHostConfig can be provided into `new InfluxDB(config)` when you\n * have a single Influx address to connect to.\n *\n * @public\n * @typedef {Object} SingleHostConfig\n * @property {String} [username='root'] Username for connecting to the database.\n * @property {String} [password='root'] Password for connecting to the database.\n * @property {String} [database] Default database to operate on. Providing this\n *     will let you omit database names in most operations, and is convenient\n *     if your app is primarily dealing with a single database.\n * @property {String} [host='127.0.0.1'] Influx host to connect to.\n * @property {Number} [port=8060] Influx port to connect to.\n * @property {String} [protocol=\"http\"] Protocol to connect over, either\n *     \"http\" or \"https\".\n * @property {PoolOptions} [pool] Options for the connection pool.\n * @property {SchemaOptions[]} [schema] An optional list of data schema to use.\n *\n * @example\n * import { InfluxDB } from 'influx'; // or const InfluxDB = require('influx').InfluxDB\n *\n * // Connect to a single host with a full set of config details and\n * // a custom schema\n * const client = new InfluxDB({\n *   database: 'my_db',\n *   host: 'localhost',\n *   port: 8086,\n *   username: 'connor',\n *   password: 'pa$$w0rd',\n *   schema: [{\n *     measurement: 'perf',\n *     tags: ['hostname'],\n *     fields: {\n *       memory_usage: FieldType.INTEGER,\n *       cpu_usage: FieldType.FLOAT,\n *       is_online: FieldType.BOOLEAN,\n *     }\n *   }]\n * })\n ",
            "range": [
              624,
              2140
            ],
            "loc": {
              "start": {
                "line": 13,
                "column": 0
              },
              "end": {
                "line": 52,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * A ClusterConfig can be provided into `new InfluxDB(config)` when you\n * have a multiple Influx nodes to connect to.\n *\n * @typedef {Object} ClusterConfig\n * @property {String} [username='root'] Username for connecting to the database.\n * @property {String} [password='root'] Password for connecting to the database.\n * @property {String} [database] Default database to operate on. Providing this\n *     will let you omit database names in most operations, and is convenient\n *     if your app is primarily dealing with a single database.\n * @property {Array} hosts A list of Influx hosts to connect to.\n * @property {String} [hosts.host='127.0.0.1'] Influx host to connect to.\n * @property {Number} [hosts.port=8060] Influx port to connect to.\n * @property {String} [hosts.protocol=\"http\"] Protocol to connect over, either\n *     \"http\" or \"https\".\n * @property {PoolOptions} [pool] Options for the connection pool.\n * @property {SchemaOptions[]} [schema] An optional list of data schema to use.\n *\n * @example\n * import { InfluxDB } from 'influx'; // or const InfluxDB = require('influx').InfluxDB\n *\n * // Connect to a single host with a full set of config details and\n * // a custom schema\n * const client = new InfluxDB({\n *   database: 'my_db',\n *   username: 'connor',\n *   password: 'pa$$w0rd',\n *   hosts: [\n *     { host: 'db1.example.com' },\n *     { host: 'db2.example.com' },\n *   ]\n *   schema: [{\n *     measurement: 'perf',\n *     tags: ['hostname'],\n *     fields: {\n *       memory_usage: FieldType.INTEGER,\n *       cpu_usage: FieldType.FLOAT,\n *       is_online: FieldType.BOOLEAN,\n *     }\n *   }]\n * })\n ",
            "range": [
              2141,
              3775
            ],
            "loc": {
              "start": {
                "line": 53,
                "column": 0
              },
              "end": {
                "line": 94,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Schema options can be passed into the `new InfluxDB()` constructor to\n * help define the shape of your data. Each schema config corresponds to\n * a measurement in Influx\n *\n * It's recommended, but not required, that you make use of schema; internally\n * we use them to be smarter about coercing your data, and providing immediate\n * error feedback if you try to write data which doesn't fit in your schema:\n * either if you include tags of fields which are not present in your schema,\n * or you enter the wrong datatype for one of your schema fields.\n *\n * @typedef {Object} SchemaOptions\n * @property {String} [database] The database where the measurement lives. This\n *     is required if you don't provide a default database in Influx.\n * @property {String} measurement The measurement name in Influx this refers to\n * @property {Object.<String, FieldType>} fields A mapping of fields names to\n *     their data types. It's assumed that this is a comprehensive mapping of\n *     every field you might write.\n * @property {String[]} tags A list of tag names in this measurement. It's\n *     assumed that this is a comprehensive list of every tag you might write.\n *\n * @example\n * {\n *   measurement: 'perf',\n *   tags: ['hostname'],\n *   fields: {\n *     memory_usage: FieldType.INTEGER,\n *     cpu_usage: FieldType.FLOAT,\n *     is_online: FieldType.BOOLEAN,\n *   }\n * }\n ",
            "range": [
              3776,
              5162
            ],
            "loc": {
              "start": {
                "line": 95,
                "column": 0
              },
              "end": {
                "line": 126,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Results are returned from the .query method. It marshals the raw Influx\n * results into a more palatable, JavaScript-y structure. All query results\n * are marshalled into a single, flat arrays, and methods are provided to\n * example grouped results as necessary. The `time` column, if included, is\n * converted into a {@link NanoDate}.\n *\n * @class Result<T>\n * @example\n * influx.query('select host, cpu, mem from perf').then(results => {\n *   expect(results).to.deep.equal([\n *     { host: 'ares.peet.io', cpu: 0.12, mem: 2435 },\n *     { host: 'ares.peet.io', cpu: 0.10, mem: 2451 },\n *     // ...\n *   ])\n * })\n ",
            "range": [
              5163,
              5788
            ],
            "loc": {
              "start": {
                "line": 127,
                "column": 0
              },
              "end": {
                "line": 143,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Point is passed to the client's write methods to store a point in InfluxDB.\n *\n * @typedef {Object} Point\n * @property {String} measurement Measurement is the Influx measurement name.\n * @property {Object.<String, String>} [tags] Tags is the list of tag\n *     values to insert.\n * @property {Object.<String, *>} [fields] Fields is the list of\n *     field values to insert.\n * @property {Date|string|number} [fields] Timestamp tags this measurement with\n *     a date. This can be a Date object, in which case we'll adjust it to the\n *     desired precision, or a numeric string or number, in which case\n *     it gets passed directly to Influx.\n ",
            "range": [
              7745,
              8402
            ],
            "loc": {
              "start": {
                "line": 201,
                "column": 0
              },
              "end": {
                "line": 214,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * WriteOptions configure how points are written in the database.\n *\n * @typedef {Object} WriteOptions\n * @property {TimePrecision} [precision] Precision at which the points are\n *     written, defaults to milliseconds \"ms\". Influx recommends that you use\n *     the coarsest precision possible in order to maximize efficiency.\n * @property {String} [retentionPolicy] The retention policy to insert\n *     the points under, uses the DEFAULT policy if not provided.\n * @property {String} [database] The database to insert the points in, uses the\n *     adapter's default database if not provided.\n ",
            "range": [
              8403,
              9006
            ],
            "loc": {
              "start": {
                "line": 215,
                "column": 0
              },
              "end": {
                "line": 226,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * The QueryOptions allow you to configure how queries are run against Influx.\n *\n * @typedef {Object} QueryOptions\n * @property {TimePrecision} [precision] Defines the precision at which\n *     to query points. Defaults to querying in nanosecond precision.\n * @property {String} [retentionPolicy] Retention policy to query from,\n *     defaults to the DEFAULT retention policy.\n * @property {String} [database]  Database under which to query the points.\n *     This is required if a database is not provided in Influx client.\n ",
            "range": [
              9007,
              9541
            ],
            "loc": {
              "start": {
                "line": 227,
                "column": 0
              },
              "end": {
                "line": 237,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * PingStats is returned from {@link InfluxDB#ping}.\n *\n * @typedef {Object} PingStats\n * @property {Url} url URL is the host's URL\n * @property {Boolean} online Whether the request was completed successfully.\n * @property {http.ServerResponse} res The raw response from the server, may be\n *     null on a timeout or HTTP error.\n * @property {Number} rtt Total time the server took to respond, in milliseconds\n * @property {String} version Version number the server reports to run\n ",
            "range": [
              9542,
              10031
            ],
            "loc": {
              "start": {
                "line": 238,
                "column": 0
              },
              "end": {
                "line": 248,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * The BackoffStrategy dictates behaviour to use when hosts in the connection\n * pool start failing. We remove them from the pool for a duration of time\n * specified by the backoff strategy.\n *\n * The strategy itself is immutable, and each method call should return a new\n * strategy without modifying the original one.\n *\n * @interface\n * @example\n * let backoff = new MyBackoffStrategy();\n * console.log(backoff.getDelay()); // => 10\n * backoff = backoff.next();\n * console.log(backoff.getDelay()); // => 20\n * backoff = backoff.reset();\n * console.log(backoff.getDelay()); // => 10\n ",
            "range": [
              10032,
              10624
            ],
            "loc": {
              "start": {
                "line": 249,
                "column": 0
              },
              "end": {
                "line": 265,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        5789,
        7744
      ],
      "loc": {
        "start": {
          "line": 144,
          "column": 0
        },
        "end": {
          "line": 200,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Pool options can be passed into the database to configure the behaviour\n * of the connection pool.\n * @typedef {Object} PoolOptions\n * @property {Number} [maxRetries=2] Number of times we should retry running\n *     a query before calling back with an error.\n * @property {Number} [requestTimeout=30000] The length of time after which\n *     HTTP requests will error if they do not receive a response.\n * @property {BackoffStrategy} [backoff] The backoff strategy to use for\n *     unhealthy connections. Defaults to an exponential backoff with an\n *     initial delay of 300ms and a maximum delay of 10 seconds.\n ",
          "range": [
            0,
            623
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * A SingleHostConfig can be provided into `new InfluxDB(config)` when you\n * have a single Influx address to connect to.\n *\n * @public\n * @typedef {Object} SingleHostConfig\n * @property {String} [username='root'] Username for connecting to the database.\n * @property {String} [password='root'] Password for connecting to the database.\n * @property {String} [database] Default database to operate on. Providing this\n *     will let you omit database names in most operations, and is convenient\n *     if your app is primarily dealing with a single database.\n * @property {String} [host='127.0.0.1'] Influx host to connect to.\n * @property {Number} [port=8060] Influx port to connect to.\n * @property {String} [protocol=\"http\"] Protocol to connect over, either\n *     \"http\" or \"https\".\n * @property {PoolOptions} [pool] Options for the connection pool.\n * @property {SchemaOptions[]} [schema] An optional list of data schema to use.\n *\n * @example\n * import { InfluxDB } from 'influx'; // or const InfluxDB = require('influx').InfluxDB\n *\n * // Connect to a single host with a full set of config details and\n * // a custom schema\n * const client = new InfluxDB({\n *   database: 'my_db',\n *   host: 'localhost',\n *   port: 8086,\n *   username: 'connor',\n *   password: 'pa$$w0rd',\n *   schema: [{\n *     measurement: 'perf',\n *     tags: ['hostname'],\n *     fields: {\n *       memory_usage: FieldType.INTEGER,\n *       cpu_usage: FieldType.FLOAT,\n *       is_online: FieldType.BOOLEAN,\n *     }\n *   }]\n * })\n ",
          "range": [
            624,
            2140
          ],
          "loc": {
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 52,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * A ClusterConfig can be provided into `new InfluxDB(config)` when you\n * have a multiple Influx nodes to connect to.\n *\n * @typedef {Object} ClusterConfig\n * @property {String} [username='root'] Username for connecting to the database.\n * @property {String} [password='root'] Password for connecting to the database.\n * @property {String} [database] Default database to operate on. Providing this\n *     will let you omit database names in most operations, and is convenient\n *     if your app is primarily dealing with a single database.\n * @property {Array} hosts A list of Influx hosts to connect to.\n * @property {String} [hosts.host='127.0.0.1'] Influx host to connect to.\n * @property {Number} [hosts.port=8060] Influx port to connect to.\n * @property {String} [hosts.protocol=\"http\"] Protocol to connect over, either\n *     \"http\" or \"https\".\n * @property {PoolOptions} [pool] Options for the connection pool.\n * @property {SchemaOptions[]} [schema] An optional list of data schema to use.\n *\n * @example\n * import { InfluxDB } from 'influx'; // or const InfluxDB = require('influx').InfluxDB\n *\n * // Connect to a single host with a full set of config details and\n * // a custom schema\n * const client = new InfluxDB({\n *   database: 'my_db',\n *   username: 'connor',\n *   password: 'pa$$w0rd',\n *   hosts: [\n *     { host: 'db1.example.com' },\n *     { host: 'db2.example.com' },\n *   ]\n *   schema: [{\n *     measurement: 'perf',\n *     tags: ['hostname'],\n *     fields: {\n *       memory_usage: FieldType.INTEGER,\n *       cpu_usage: FieldType.FLOAT,\n *       is_online: FieldType.BOOLEAN,\n *     }\n *   }]\n * })\n ",
          "range": [
            2141,
            3775
          ],
          "loc": {
            "start": {
              "line": 53,
              "column": 0
            },
            "end": {
              "line": 94,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Schema options can be passed into the `new InfluxDB()` constructor to\n * help define the shape of your data. Each schema config corresponds to\n * a measurement in Influx\n *\n * It's recommended, but not required, that you make use of schema; internally\n * we use them to be smarter about coercing your data, and providing immediate\n * error feedback if you try to write data which doesn't fit in your schema:\n * either if you include tags of fields which are not present in your schema,\n * or you enter the wrong datatype for one of your schema fields.\n *\n * @typedef {Object} SchemaOptions\n * @property {String} [database] The database where the measurement lives. This\n *     is required if you don't provide a default database in Influx.\n * @property {String} measurement The measurement name in Influx this refers to\n * @property {Object.<String, FieldType>} fields A mapping of fields names to\n *     their data types. It's assumed that this is a comprehensive mapping of\n *     every field you might write.\n * @property {String[]} tags A list of tag names in this measurement. It's\n *     assumed that this is a comprehensive list of every tag you might write.\n *\n * @example\n * {\n *   measurement: 'perf',\n *   tags: ['hostname'],\n *   fields: {\n *     memory_usage: FieldType.INTEGER,\n *     cpu_usage: FieldType.FLOAT,\n *     is_online: FieldType.BOOLEAN,\n *   }\n * }\n ",
          "range": [
            3776,
            5162
          ],
          "loc": {
            "start": {
              "line": 95,
              "column": 0
            },
            "end": {
              "line": 126,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Results are returned from the .query method. It marshals the raw Influx\n * results into a more palatable, JavaScript-y structure. All query results\n * are marshalled into a single, flat arrays, and methods are provided to\n * example grouped results as necessary. The `time` column, if included, is\n * converted into a {@link NanoDate}.\n *\n * @class Result<T>\n * @example\n * influx.query('select host, cpu, mem from perf').then(results => {\n *   expect(results).to.deep.equal([\n *     { host: 'ares.peet.io', cpu: 0.12, mem: 2435 },\n *     { host: 'ares.peet.io', cpu: 0.10, mem: 2451 },\n *     // ...\n *   ])\n * })\n ",
          "range": [
            5163,
            5788
          ],
          "loc": {
            "start": {
              "line": 127,
              "column": 0
            },
            "end": {
              "line": 143,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Point is passed to the client's write methods to store a point in InfluxDB.\n *\n * @typedef {Object} Point\n * @property {String} measurement Measurement is the Influx measurement name.\n * @property {Object.<String, String>} [tags] Tags is the list of tag\n *     values to insert.\n * @property {Object.<String, *>} [fields] Fields is the list of\n *     field values to insert.\n * @property {Date|string|number} [fields] Timestamp tags this measurement with\n *     a date. This can be a Date object, in which case we'll adjust it to the\n *     desired precision, or a numeric string or number, in which case\n *     it gets passed directly to Influx.\n ",
          "range": [
            7745,
            8402
          ],
          "loc": {
            "start": {
              "line": 201,
              "column": 0
            },
            "end": {
              "line": 214,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * WriteOptions configure how points are written in the database.\n *\n * @typedef {Object} WriteOptions\n * @property {TimePrecision} [precision] Precision at which the points are\n *     written, defaults to milliseconds \"ms\". Influx recommends that you use\n *     the coarsest precision possible in order to maximize efficiency.\n * @property {String} [retentionPolicy] The retention policy to insert\n *     the points under, uses the DEFAULT policy if not provided.\n * @property {String} [database] The database to insert the points in, uses the\n *     adapter's default database if not provided.\n ",
          "range": [
            8403,
            9006
          ],
          "loc": {
            "start": {
              "line": 215,
              "column": 0
            },
            "end": {
              "line": 226,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * The QueryOptions allow you to configure how queries are run against Influx.\n *\n * @typedef {Object} QueryOptions\n * @property {TimePrecision} [precision] Defines the precision at which\n *     to query points. Defaults to querying in nanosecond precision.\n * @property {String} [retentionPolicy] Retention policy to query from,\n *     defaults to the DEFAULT retention policy.\n * @property {String} [database]  Database under which to query the points.\n *     This is required if a database is not provided in Influx client.\n ",
          "range": [
            9007,
            9541
          ],
          "loc": {
            "start": {
              "line": 227,
              "column": 0
            },
            "end": {
              "line": 237,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * PingStats is returned from {@link InfluxDB#ping}.\n *\n * @typedef {Object} PingStats\n * @property {Url} url URL is the host's URL\n * @property {Boolean} online Whether the request was completed successfully.\n * @property {http.ServerResponse} res The raw response from the server, may be\n *     null on a timeout or HTTP error.\n * @property {Number} rtt Total time the server took to respond, in milliseconds\n * @property {String} version Version number the server reports to run\n ",
          "range": [
            9542,
            10031
          ],
          "loc": {
            "start": {
              "line": 238,
              "column": 0
            },
            "end": {
              "line": 248,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * The BackoffStrategy dictates behaviour to use when hosts in the connection\n * pool start failing. We remove them from the pool for a duration of time\n * specified by the backoff strategy.\n *\n * The strategy itself is immutable, and each method call should return a new\n * strategy without modifying the original one.\n *\n * @interface\n * @example\n * let backoff = new MyBackoffStrategy();\n * console.log(backoff.getDelay()); // => 10\n * backoff = backoff.next();\n * console.log(backoff.getDelay()); // => 20\n * backoff = backoff.reset();\n * console.log(backoff.getDelay()); // => 10\n ",
          "range": [
            10032,
            10624
          ],
          "loc": {
            "start": {
              "line": 249,
              "column": 0
            },
            "end": {
              "line": 265,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "BackoffStrategy",
          "range": [
            10638,
            10653
          ],
          "loc": {
            "start": {
              "line": 266,
              "column": 13
            },
            "end": {
              "line": 266,
              "column": 28
            }
          }
        },
        "superClass": null,
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "getDelay",
                "range": [
                  10768,
                  10776
                ],
                "loc": {
                  "start": {
                    "line": 271,
                    "column": 4
                  },
                  "end": {
                    "line": 271,
                    "column": 12
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          10788,
                          10789
                        ],
                        "loc": {
                          "start": {
                            "line": 271,
                            "column": 24
                          },
                          "end": {
                            "line": 271,
                            "column": 25
                          }
                        }
                      },
                      "range": [
                        10781,
                        10790
                      ],
                      "loc": {
                        "start": {
                          "line": 271,
                          "column": 17
                        },
                        "end": {
                          "line": 271,
                          "column": 26
                        }
                      }
                    }
                  ],
                  "range": [
                    10779,
                    10792
                  ],
                  "loc": {
                    "start": {
                      "line": 271,
                      "column": 15
                    },
                    "end": {
                      "line": 271,
                      "column": 28
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  10776,
                  10792
                ],
                "loc": {
                  "start": {
                    "line": 271,
                    "column": 12
                  },
                  "end": {
                    "line": 271,
                    "column": 28
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                10768,
                10792
              ],
              "loc": {
                "start": {
                  "line": 271,
                  "column": 4
                },
                "end": {
                  "line": 271,
                  "column": 28
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * getDelay returns the amount of delay of the current backoff.\n     * @return {Number}\n     ",
                  "range": [
                    10660,
                    10763
                  ],
                  "loc": {
                    "start": {
                      "line": 267,
                      "column": 4
                    },
                    "end": {
                      "line": 270,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Next is called when a failure occurs on a host to\n     * return the next backoff amount.\n     * @return {BackoffStrategy}\n     ",
                  "range": [
                    10797,
                    10937
                  ],
                  "loc": {
                    "start": {
                      "line": 272,
                      "column": 4
                    },
                    "end": {
                      "line": 276,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "next",
                "range": [
                  10942,
                  10946
                ],
                "loc": {
                  "start": {
                    "line": 277,
                    "column": 4
                  },
                  "end": {
                    "line": 277,
                    "column": 8
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ThisExpression",
                        "range": [
                          10958,
                          10962
                        ],
                        "loc": {
                          "start": {
                            "line": 277,
                            "column": 20
                          },
                          "end": {
                            "line": 277,
                            "column": 24
                          }
                        }
                      },
                      "range": [
                        10951,
                        10963
                      ],
                      "loc": {
                        "start": {
                          "line": 277,
                          "column": 13
                        },
                        "end": {
                          "line": 277,
                          "column": 25
                        }
                      }
                    }
                  ],
                  "range": [
                    10949,
                    10965
                  ],
                  "loc": {
                    "start": {
                      "line": 277,
                      "column": 11
                    },
                    "end": {
                      "line": 277,
                      "column": 27
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  10946,
                  10965
                ],
                "loc": {
                  "start": {
                    "line": 277,
                    "column": 8
                  },
                  "end": {
                    "line": 277,
                    "column": 27
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                10942,
                10965
              ],
              "loc": {
                "start": {
                  "line": 277,
                  "column": 4
                },
                "end": {
                  "line": 277,
                  "column": 27
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Next is called when a failure occurs on a host to\n     * return the next backoff amount.\n     * @return {BackoffStrategy}\n     ",
                  "range": [
                    10797,
                    10937
                  ],
                  "loc": {
                    "start": {
                      "line": 272,
                      "column": 4
                    },
                    "end": {
                      "line": 276,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns a strategy with a reset backoff counter.\n     * @return {BackoffStrategy}\n     ",
                  "range": [
                    10970,
                    11070
                  ],
                  "loc": {
                    "start": {
                      "line": 278,
                      "column": 4
                    },
                    "end": {
                      "line": 281,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "reset",
                "range": [
                  11075,
                  11080
                ],
                "loc": {
                  "start": {
                    "line": 282,
                    "column": 4
                  },
                  "end": {
                    "line": 282,
                    "column": 9
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ThisExpression",
                        "range": [
                          11092,
                          11096
                        ],
                        "loc": {
                          "start": {
                            "line": 282,
                            "column": 21
                          },
                          "end": {
                            "line": 282,
                            "column": 25
                          }
                        }
                      },
                      "range": [
                        11085,
                        11097
                      ],
                      "loc": {
                        "start": {
                          "line": 282,
                          "column": 14
                        },
                        "end": {
                          "line": 282,
                          "column": 26
                        }
                      }
                    }
                  ],
                  "range": [
                    11083,
                    11099
                  ],
                  "loc": {
                    "start": {
                      "line": 282,
                      "column": 12
                    },
                    "end": {
                      "line": 282,
                      "column": 28
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  11080,
                  11099
                ],
                "loc": {
                  "start": {
                    "line": 282,
                    "column": 9
                  },
                  "end": {
                    "line": 282,
                    "column": 28
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                11075,
                11099
              ],
              "loc": {
                "start": {
                  "line": 282,
                  "column": 4
                },
                "end": {
                  "line": 282,
                  "column": 28
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns a strategy with a reset backoff counter.\n     * @return {BackoffStrategy}\n     ",
                  "range": [
                    10970,
                    11070
                  ],
                  "loc": {
                    "start": {
                      "line": 278,
                      "column": 4
                    },
                    "end": {
                      "line": 281,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            10654,
            11101
          ],
          "loc": {
            "start": {
              "line": 266,
              "column": 29
            },
            "end": {
              "line": 283,
              "column": 1
            }
          }
        },
        "range": [
          10632,
          11101
        ],
        "loc": {
          "start": {
            "line": 266,
            "column": 7
          },
          "end": {
            "line": 283,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Point is passed to the client's write methods to store a point in InfluxDB.\n *\n * @typedef {Object} Point\n * @property {String} measurement Measurement is the Influx measurement name.\n * @property {Object.<String, String>} [tags] Tags is the list of tag\n *     values to insert.\n * @property {Object.<String, *>} [fields] Fields is the list of\n *     field values to insert.\n * @property {Date|string|number} [fields] Timestamp tags this measurement with\n *     a date. This can be a Date object, in which case we'll adjust it to the\n *     desired precision, or a numeric string or number, in which case\n *     it gets passed directly to Influx.\n ",
            "range": [
              7745,
              8402
            ],
            "loc": {
              "start": {
                "line": 201,
                "column": 0
              },
              "end": {
                "line": 214,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * WriteOptions configure how points are written in the database.\n *\n * @typedef {Object} WriteOptions\n * @property {TimePrecision} [precision] Precision at which the points are\n *     written, defaults to milliseconds \"ms\". Influx recommends that you use\n *     the coarsest precision possible in order to maximize efficiency.\n * @property {String} [retentionPolicy] The retention policy to insert\n *     the points under, uses the DEFAULT policy if not provided.\n * @property {String} [database] The database to insert the points in, uses the\n *     adapter's default database if not provided.\n ",
            "range": [
              8403,
              9006
            ],
            "loc": {
              "start": {
                "line": 215,
                "column": 0
              },
              "end": {
                "line": 226,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * The QueryOptions allow you to configure how queries are run against Influx.\n *\n * @typedef {Object} QueryOptions\n * @property {TimePrecision} [precision] Defines the precision at which\n *     to query points. Defaults to querying in nanosecond precision.\n * @property {String} [retentionPolicy] Retention policy to query from,\n *     defaults to the DEFAULT retention policy.\n * @property {String} [database]  Database under which to query the points.\n *     This is required if a database is not provided in Influx client.\n ",
            "range": [
              9007,
              9541
            ],
            "loc": {
              "start": {
                "line": 227,
                "column": 0
              },
              "end": {
                "line": 237,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * PingStats is returned from {@link InfluxDB#ping}.\n *\n * @typedef {Object} PingStats\n * @property {Url} url URL is the host's URL\n * @property {Boolean} online Whether the request was completed successfully.\n * @property {http.ServerResponse} res The raw response from the server, may be\n *     null on a timeout or HTTP error.\n * @property {Number} rtt Total time the server took to respond, in milliseconds\n * @property {String} version Version number the server reports to run\n ",
            "range": [
              9542,
              10031
            ],
            "loc": {
              "start": {
                "line": 238,
                "column": 0
              },
              "end": {
                "line": 248,
                "column": 3
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * The BackoffStrategy dictates behaviour to use when hosts in the connection\n * pool start failing. We remove them from the pool for a duration of time\n * specified by the backoff strategy.\n *\n * The strategy itself is immutable, and each method call should return a new\n * strategy without modifying the original one.\n *\n * @interface\n * @example\n * let backoff = new MyBackoffStrategy();\n * console.log(backoff.getDelay()); // => 10\n * backoff = backoff.next();\n * console.log(backoff.getDelay()); // => 20\n * backoff = backoff.reset();\n * console.log(backoff.getDelay()); // => 10\n ",
            "range": [
              10032,
              10624
            ],
            "loc": {
              "start": {
                "line": 249,
                "column": 0
              },
              "end": {
                "line": 265,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * A NanoDate is a type of Date that holds a nanosecond-precision unix\n * timestamp. It's the default date type parsed in {@link Results} and\n * can be created manually using {@link toNanoDate}.\n * @interface\n ",
            "range": [
              11102,
              11318
            ],
            "loc": {
              "start": {
                "line": 284,
                "column": 0
              },
              "end": {
                "line": 289,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        10625,
        11101
      ],
      "loc": {
        "start": {
          "line": 266,
          "column": 0
        },
        "end": {
          "line": 283,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Point is passed to the client's write methods to store a point in InfluxDB.\n *\n * @typedef {Object} Point\n * @property {String} measurement Measurement is the Influx measurement name.\n * @property {Object.<String, String>} [tags] Tags is the list of tag\n *     values to insert.\n * @property {Object.<String, *>} [fields] Fields is the list of\n *     field values to insert.\n * @property {Date|string|number} [fields] Timestamp tags this measurement with\n *     a date. This can be a Date object, in which case we'll adjust it to the\n *     desired precision, or a numeric string or number, in which case\n *     it gets passed directly to Influx.\n ",
          "range": [
            7745,
            8402
          ],
          "loc": {
            "start": {
              "line": 201,
              "column": 0
            },
            "end": {
              "line": 214,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * WriteOptions configure how points are written in the database.\n *\n * @typedef {Object} WriteOptions\n * @property {TimePrecision} [precision] Precision at which the points are\n *     written, defaults to milliseconds \"ms\". Influx recommends that you use\n *     the coarsest precision possible in order to maximize efficiency.\n * @property {String} [retentionPolicy] The retention policy to insert\n *     the points under, uses the DEFAULT policy if not provided.\n * @property {String} [database] The database to insert the points in, uses the\n *     adapter's default database if not provided.\n ",
          "range": [
            8403,
            9006
          ],
          "loc": {
            "start": {
              "line": 215,
              "column": 0
            },
            "end": {
              "line": 226,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * The QueryOptions allow you to configure how queries are run against Influx.\n *\n * @typedef {Object} QueryOptions\n * @property {TimePrecision} [precision] Defines the precision at which\n *     to query points. Defaults to querying in nanosecond precision.\n * @property {String} [retentionPolicy] Retention policy to query from,\n *     defaults to the DEFAULT retention policy.\n * @property {String} [database]  Database under which to query the points.\n *     This is required if a database is not provided in Influx client.\n ",
          "range": [
            9007,
            9541
          ],
          "loc": {
            "start": {
              "line": 227,
              "column": 0
            },
            "end": {
              "line": 237,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * PingStats is returned from {@link InfluxDB#ping}.\n *\n * @typedef {Object} PingStats\n * @property {Url} url URL is the host's URL\n * @property {Boolean} online Whether the request was completed successfully.\n * @property {http.ServerResponse} res The raw response from the server, may be\n *     null on a timeout or HTTP error.\n * @property {Number} rtt Total time the server took to respond, in milliseconds\n * @property {String} version Version number the server reports to run\n ",
          "range": [
            9542,
            10031
          ],
          "loc": {
            "start": {
              "line": 238,
              "column": 0
            },
            "end": {
              "line": 248,
              "column": 3
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * The BackoffStrategy dictates behaviour to use when hosts in the connection\n * pool start failing. We remove them from the pool for a duration of time\n * specified by the backoff strategy.\n *\n * The strategy itself is immutable, and each method call should return a new\n * strategy without modifying the original one.\n *\n * @interface\n * @example\n * let backoff = new MyBackoffStrategy();\n * console.log(backoff.getDelay()); // => 10\n * backoff = backoff.next();\n * console.log(backoff.getDelay()); // => 20\n * backoff = backoff.reset();\n * console.log(backoff.getDelay()); // => 10\n ",
          "range": [
            10032,
            10624
          ],
          "loc": {
            "start": {
              "line": 249,
              "column": 0
            },
            "end": {
              "line": 265,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * A NanoDate is a type of Date that holds a nanosecond-precision unix\n * timestamp. It's the default date type parsed in {@link Results} and\n * can be created manually using {@link toNanoDate}.\n * @interface\n ",
          "range": [
            11102,
            11318
          ],
          "loc": {
            "start": {
              "line": 284,
              "column": 0
            },
            "end": {
              "line": 289,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "NanoDate",
          "range": [
            11332,
            11340
          ],
          "loc": {
            "start": {
              "line": 290,
              "column": 13
            },
            "end": {
              "line": 290,
              "column": 21
            }
          }
        },
        "superClass": {
          "type": "Identifier",
          "name": "Date",
          "range": [
            11349,
            11353
          ],
          "loc": {
            "start": {
              "line": 290,
              "column": 30
            },
            "end": {
              "line": 290,
              "column": 34
            }
          }
        },
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "getNanoTime",
                "range": [
                  11571,
                  11582
                ],
                "loc": {
                  "start": {
                    "line": 297,
                    "column": 4
                  },
                  "end": {
                    "line": 297,
                    "column": 15
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": "",
                        "raw": "\"\"",
                        "range": [
                          11594,
                          11596
                        ],
                        "loc": {
                          "start": {
                            "line": 297,
                            "column": 27
                          },
                          "end": {
                            "line": 297,
                            "column": 29
                          }
                        }
                      },
                      "range": [
                        11587,
                        11597
                      ],
                      "loc": {
                        "start": {
                          "line": 297,
                          "column": 20
                        },
                        "end": {
                          "line": 297,
                          "column": 30
                        }
                      }
                    }
                  ],
                  "range": [
                    11585,
                    11599
                  ],
                  "loc": {
                    "start": {
                      "line": 297,
                      "column": 18
                    },
                    "end": {
                      "line": 297,
                      "column": 32
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  11582,
                  11599
                ],
                "loc": {
                  "start": {
                    "line": 297,
                    "column": 15
                  },
                  "end": {
                    "line": 297,
                    "column": 32
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                11571,
                11599
              ],
              "loc": {
                "start": {
                  "line": 297,
                  "column": 4
                },
                "end": {
                  "line": 297,
                  "column": 32
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Returns the unix nanoseconds timestamp as a string.\n     * @example\n     * const date = toNanoDate('1475985480231035677')\n     * expect(date.getNanoTime()).to.equal('1475985480231035677')\n     ",
                  "range": [
                    11360,
                    11566
                  ],
                  "loc": {
                    "start": {
                      "line": 291,
                      "column": 4
                    },
                    "end": {
                      "line": 296,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "toNanoISOString",
                "range": [
                  11856,
                  11871
                ],
                "loc": {
                  "start": {
                    "line": 305,
                    "column": 4
                  },
                  "end": {
                    "line": 305,
                    "column": 19
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": "",
                        "raw": "\"\"",
                        "range": [
                          11883,
                          11885
                        ],
                        "loc": {
                          "start": {
                            "line": 305,
                            "column": 31
                          },
                          "end": {
                            "line": 305,
                            "column": 33
                          }
                        }
                      },
                      "range": [
                        11876,
                        11886
                      ],
                      "loc": {
                        "start": {
                          "line": 305,
                          "column": 24
                        },
                        "end": {
                          "line": 305,
                          "column": 34
                        }
                      }
                    }
                  ],
                  "range": [
                    11874,
                    11888
                  ],
                  "loc": {
                    "start": {
                      "line": 305,
                      "column": 22
                    },
                    "end": {
                      "line": 305,
                      "column": 36
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  11871,
                  11888
                ],
                "loc": {
                  "start": {
                    "line": 305,
                    "column": 19
                  },
                  "end": {
                    "line": 305,
                    "column": 36
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                11856,
                11888
              ],
              "loc": {
                "start": {
                  "line": 305,
                  "column": 4
                },
                "end": {
                  "line": 305,
                  "column": 36
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Formats the date as an ISO RFC3339 timestamp with nanosecond precision.\n     * @example\n     * const date = toNanoDate('1475985480231035677')\n     * expect(date.toNanoISOString()).to.equal('2016-10-09T03:58:00.231035677Z')\n     ",
                  "range": [
                    11610,
                    11851
                  ],
                  "loc": {
                    "start": {
                      "line": 299,
                      "column": 4
                    },
                    "end": {
                      "line": 304,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            11354,
            11896
          ],
          "loc": {
            "start": {
              "line": 290,
              "column": 35
            },
            "end": {
              "line": 307,
              "column": 1
            }
          }
        },
        "range": [
          11326,
          11896
        ],
        "loc": {
          "start": {
            "line": 290,
            "column": 7
          },
          "end": {
            "line": 307,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * A NanoDate is a type of Date that holds a nanosecond-precision unix\n * timestamp. It's the default date type parsed in {@link Results} and\n * can be created manually using {@link toNanoDate}.\n * @interface\n ",
            "range": [
              11102,
              11318
            ],
            "loc": {
              "start": {
                "line": 284,
                "column": 0
              },
              "end": {
                "line": 289,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        11319,
        11896
      ],
      "loc": {
        "start": {
          "line": 290,
          "column": 0
        },
        "end": {
          "line": 307,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * A NanoDate is a type of Date that holds a nanosecond-precision unix\n * timestamp. It's the default date type parsed in {@link Results} and\n * can be created manually using {@link toNanoDate}.\n * @interface\n ",
          "range": [
            11102,
            11318
          ],
          "loc": {
            "start": {
              "line": 284,
              "column": 0
            },
            "end": {
              "line": 289,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    5789,
    11896
  ],
  "loc": {
    "start": {
      "line": 144,
      "column": 0
    },
    "end": {
      "line": 307,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Pool options can be passed into the database to configure the behaviour\n * of the connection pool.\n * @typedef {Object} PoolOptions\n * @property {Number} [maxRetries=2] Number of times we should retry running\n *     a query before calling back with an error.\n * @property {Number} [requestTimeout=30000] The length of time after which\n *     HTTP requests will error if they do not receive a response.\n * @property {BackoffStrategy} [backoff] The backoff strategy to use for\n *     unhealthy connections. Defaults to an exponential backoff with an\n *     initial delay of 300ms and a maximum delay of 10 seconds.\n ",
      "range": [
        0,
        623
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * A SingleHostConfig can be provided into `new InfluxDB(config)` when you\n * have a single Influx address to connect to.\n *\n * @public\n * @typedef {Object} SingleHostConfig\n * @property {String} [username='root'] Username for connecting to the database.\n * @property {String} [password='root'] Password for connecting to the database.\n * @property {String} [database] Default database to operate on. Providing this\n *     will let you omit database names in most operations, and is convenient\n *     if your app is primarily dealing with a single database.\n * @property {String} [host='127.0.0.1'] Influx host to connect to.\n * @property {Number} [port=8060] Influx port to connect to.\n * @property {String} [protocol=\"http\"] Protocol to connect over, either\n *     \"http\" or \"https\".\n * @property {PoolOptions} [pool] Options for the connection pool.\n * @property {SchemaOptions[]} [schema] An optional list of data schema to use.\n *\n * @example\n * import { InfluxDB } from 'influx'; // or const InfluxDB = require('influx').InfluxDB\n *\n * // Connect to a single host with a full set of config details and\n * // a custom schema\n * const client = new InfluxDB({\n *   database: 'my_db',\n *   host: 'localhost',\n *   port: 8086,\n *   username: 'connor',\n *   password: 'pa$$w0rd',\n *   schema: [{\n *     measurement: 'perf',\n *     tags: ['hostname'],\n *     fields: {\n *       memory_usage: FieldType.INTEGER,\n *       cpu_usage: FieldType.FLOAT,\n *       is_online: FieldType.BOOLEAN,\n *     }\n *   }]\n * })\n ",
      "range": [
        624,
        2140
      ],
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 52,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * A ClusterConfig can be provided into `new InfluxDB(config)` when you\n * have a multiple Influx nodes to connect to.\n *\n * @typedef {Object} ClusterConfig\n * @property {String} [username='root'] Username for connecting to the database.\n * @property {String} [password='root'] Password for connecting to the database.\n * @property {String} [database] Default database to operate on. Providing this\n *     will let you omit database names in most operations, and is convenient\n *     if your app is primarily dealing with a single database.\n * @property {Array} hosts A list of Influx hosts to connect to.\n * @property {String} [hosts.host='127.0.0.1'] Influx host to connect to.\n * @property {Number} [hosts.port=8060] Influx port to connect to.\n * @property {String} [hosts.protocol=\"http\"] Protocol to connect over, either\n *     \"http\" or \"https\".\n * @property {PoolOptions} [pool] Options for the connection pool.\n * @property {SchemaOptions[]} [schema] An optional list of data schema to use.\n *\n * @example\n * import { InfluxDB } from 'influx'; // or const InfluxDB = require('influx').InfluxDB\n *\n * // Connect to a single host with a full set of config details and\n * // a custom schema\n * const client = new InfluxDB({\n *   database: 'my_db',\n *   username: 'connor',\n *   password: 'pa$$w0rd',\n *   hosts: [\n *     { host: 'db1.example.com' },\n *     { host: 'db2.example.com' },\n *   ]\n *   schema: [{\n *     measurement: 'perf',\n *     tags: ['hostname'],\n *     fields: {\n *       memory_usage: FieldType.INTEGER,\n *       cpu_usage: FieldType.FLOAT,\n *       is_online: FieldType.BOOLEAN,\n *     }\n *   }]\n * })\n ",
      "range": [
        2141,
        3775
      ],
      "loc": {
        "start": {
          "line": 53,
          "column": 0
        },
        "end": {
          "line": 94,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Schema options can be passed into the `new InfluxDB()` constructor to\n * help define the shape of your data. Each schema config corresponds to\n * a measurement in Influx\n *\n * It's recommended, but not required, that you make use of schema; internally\n * we use them to be smarter about coercing your data, and providing immediate\n * error feedback if you try to write data which doesn't fit in your schema:\n * either if you include tags of fields which are not present in your schema,\n * or you enter the wrong datatype for one of your schema fields.\n *\n * @typedef {Object} SchemaOptions\n * @property {String} [database] The database where the measurement lives. This\n *     is required if you don't provide a default database in Influx.\n * @property {String} measurement The measurement name in Influx this refers to\n * @property {Object.<String, FieldType>} fields A mapping of fields names to\n *     their data types. It's assumed that this is a comprehensive mapping of\n *     every field you might write.\n * @property {String[]} tags A list of tag names in this measurement. It's\n *     assumed that this is a comprehensive list of every tag you might write.\n *\n * @example\n * {\n *   measurement: 'perf',\n *   tags: ['hostname'],\n *   fields: {\n *     memory_usage: FieldType.INTEGER,\n *     cpu_usage: FieldType.FLOAT,\n *     is_online: FieldType.BOOLEAN,\n *   }\n * }\n ",
      "range": [
        3776,
        5162
      ],
      "loc": {
        "start": {
          "line": 95,
          "column": 0
        },
        "end": {
          "line": 126,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Results are returned from the .query method. It marshals the raw Influx\n * results into a more palatable, JavaScript-y structure. All query results\n * are marshalled into a single, flat arrays, and methods are provided to\n * example grouped results as necessary. The `time` column, if included, is\n * converted into a {@link NanoDate}.\n *\n * @class Result<T>\n * @example\n * influx.query('select host, cpu, mem from perf').then(results => {\n *   expect(results).to.deep.equal([\n *     { host: 'ares.peet.io', cpu: 0.12, mem: 2435 },\n *     { host: 'ares.peet.io', cpu: 0.10, mem: 2451 },\n *     // ...\n *   ])\n * })\n ",
      "range": [
        5163,
        5788
      ],
      "loc": {
        "start": {
          "line": 127,
          "column": 0
        },
        "end": {
          "line": 143,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Group looks for and returns the first group in the results\n     * that matches the provided tags.\n     *\n     * If you've used lodash or underscore, we do something quite similar to\n     * their object matching: for every row in the results, if it contains tag\n     * values matching the requested object, we return it.\n     *\n     * @param  {Object.<String, String>} matcher\n     * @return {T[]}\n     * @example\n     * // Matching tags sets in queries:\n     * influx.query('select * from perf group by host').then(results => {\n     *   expect(results.group({ host: 'ares.peet.io'})).to.deep.equal([\n     *     { host: 'ares.peet.io', cpu: 0.12, mem: 2435 },\n     *     { host: 'ares.peet.io', cpu: 0.10, mem: 2451 },\n     *     // ...\n     *   ])\n     *\n     *   expect(results.group({ host: 'box1.example.com'})).to.deep.equal([\n     *     { host: 'box1.example.com', cpu: 0.54, mem: 8420 },\n     *     // ...\n     *   ])\n     * })\n     ",
      "range": [
        5830,
        6782
      ],
      "loc": {
        "start": {
          "line": 145,
          "column": 4
        },
        "end": {
          "line": 169,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Returns the data grouped into nested arrays, similarly to how it was\n     * returned from Influx originally.\n     *\n     * @returns {Array<{ name: String, tags: Object.<String, String>, rows: T[] }>}\n     * @example\n     * influx.query('select * from perf group by host').then(results => {\n     *   expect(results.groups()).to.deep.equal([\n     *     {\n     *       name: 'perf',\n     *       tags: { host: 'ares.peet.io' },\n     *       rows: [\n     *         { host: 'ares.peet.io', cpu: 0.12, mem: 2435 },\n     *         { host: 'ares.peet.io', cpu: 0.10, mem: 2451 },\n     *         // ...\n     *       ]\n     *     }\n     *     {\n     *       name: 'perf',\n     *       tags: { host: 'box1.example.com' },\n     *       rows: [\n     *         { host: 'box1.example.com', cpu: 0.54, mem: 8420 },\n     *         // ...\n     *       ]\n     *     }\n     *   ])\n     * })\n     ",
      "range": [
        6823,
        7712
      ],
      "loc": {
        "start": {
          "line": 171,
          "column": 4
        },
        "end": {
          "line": 198,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Point is passed to the client's write methods to store a point in InfluxDB.\n *\n * @typedef {Object} Point\n * @property {String} measurement Measurement is the Influx measurement name.\n * @property {Object.<String, String>} [tags] Tags is the list of tag\n *     values to insert.\n * @property {Object.<String, *>} [fields] Fields is the list of\n *     field values to insert.\n * @property {Date|string|number} [fields] Timestamp tags this measurement with\n *     a date. This can be a Date object, in which case we'll adjust it to the\n *     desired precision, or a numeric string or number, in which case\n *     it gets passed directly to Influx.\n ",
      "range": [
        7745,
        8402
      ],
      "loc": {
        "start": {
          "line": 201,
          "column": 0
        },
        "end": {
          "line": 214,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * WriteOptions configure how points are written in the database.\n *\n * @typedef {Object} WriteOptions\n * @property {TimePrecision} [precision] Precision at which the points are\n *     written, defaults to milliseconds \"ms\". Influx recommends that you use\n *     the coarsest precision possible in order to maximize efficiency.\n * @property {String} [retentionPolicy] The retention policy to insert\n *     the points under, uses the DEFAULT policy if not provided.\n * @property {String} [database] The database to insert the points in, uses the\n *     adapter's default database if not provided.\n ",
      "range": [
        8403,
        9006
      ],
      "loc": {
        "start": {
          "line": 215,
          "column": 0
        },
        "end": {
          "line": 226,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * The QueryOptions allow you to configure how queries are run against Influx.\n *\n * @typedef {Object} QueryOptions\n * @property {TimePrecision} [precision] Defines the precision at which\n *     to query points. Defaults to querying in nanosecond precision.\n * @property {String} [retentionPolicy] Retention policy to query from,\n *     defaults to the DEFAULT retention policy.\n * @property {String} [database]  Database under which to query the points.\n *     This is required if a database is not provided in Influx client.\n ",
      "range": [
        9007,
        9541
      ],
      "loc": {
        "start": {
          "line": 227,
          "column": 0
        },
        "end": {
          "line": 237,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * PingStats is returned from {@link InfluxDB#ping}.\n *\n * @typedef {Object} PingStats\n * @property {Url} url URL is the host's URL\n * @property {Boolean} online Whether the request was completed successfully.\n * @property {http.ServerResponse} res The raw response from the server, may be\n *     null on a timeout or HTTP error.\n * @property {Number} rtt Total time the server took to respond, in milliseconds\n * @property {String} version Version number the server reports to run\n ",
      "range": [
        9542,
        10031
      ],
      "loc": {
        "start": {
          "line": 238,
          "column": 0
        },
        "end": {
          "line": 248,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * The BackoffStrategy dictates behaviour to use when hosts in the connection\n * pool start failing. We remove them from the pool for a duration of time\n * specified by the backoff strategy.\n *\n * The strategy itself is immutable, and each method call should return a new\n * strategy without modifying the original one.\n *\n * @interface\n * @example\n * let backoff = new MyBackoffStrategy();\n * console.log(backoff.getDelay()); // => 10\n * backoff = backoff.next();\n * console.log(backoff.getDelay()); // => 20\n * backoff = backoff.reset();\n * console.log(backoff.getDelay()); // => 10\n ",
      "range": [
        10032,
        10624
      ],
      "loc": {
        "start": {
          "line": 249,
          "column": 0
        },
        "end": {
          "line": 265,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * getDelay returns the amount of delay of the current backoff.\n     * @return {Number}\n     ",
      "range": [
        10660,
        10763
      ],
      "loc": {
        "start": {
          "line": 267,
          "column": 4
        },
        "end": {
          "line": 270,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Next is called when a failure occurs on a host to\n     * return the next backoff amount.\n     * @return {BackoffStrategy}\n     ",
      "range": [
        10797,
        10937
      ],
      "loc": {
        "start": {
          "line": 272,
          "column": 4
        },
        "end": {
          "line": 276,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Returns a strategy with a reset backoff counter.\n     * @return {BackoffStrategy}\n     ",
      "range": [
        10970,
        11070
      ],
      "loc": {
        "start": {
          "line": 278,
          "column": 4
        },
        "end": {
          "line": 281,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * A NanoDate is a type of Date that holds a nanosecond-precision unix\n * timestamp. It's the default date type parsed in {@link Results} and\n * can be created manually using {@link toNanoDate}.\n * @interface\n ",
      "range": [
        11102,
        11318
      ],
      "loc": {
        "start": {
          "line": 284,
          "column": 0
        },
        "end": {
          "line": 289,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Returns the unix nanoseconds timestamp as a string.\n     * @example\n     * const date = toNanoDate('1475985480231035677')\n     * expect(date.getNanoTime()).to.equal('1475985480231035677')\n     ",
      "range": [
        11360,
        11566
      ],
      "loc": {
        "start": {
          "line": 291,
          "column": 4
        },
        "end": {
          "line": 296,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Formats the date as an ISO RFC3339 timestamp with nanosecond precision.\n     * @example\n     * const date = toNanoDate('1475985480231035677')\n     * expect(date.toNanoISOString()).to.equal('2016-10-09T03:58:00.231035677Z')\n     ",
      "range": [
        11610,
        11851
      ],
      "loc": {
        "start": {
          "line": 299,
          "column": 4
        },
        "end": {
          "line": 304,
          "column": 7
        }
      }
    }
  ]
}